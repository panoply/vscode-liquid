{"$schema":"http://json-schema.org/draft-07/schema","version":1.1,"definitions":{"input":{"type":"string","default":"source","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[a-zA-Z0-9_-]{1,}){0,}$","markdownDescription":"**Input Directory**\n\nThe **source** build path is the directory where theme files exist. Syncify defaults this to `source` The value defined here will be prepended to any path you define within `paths`."},"output":{"type":"string","default":"theme","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[a-zA-Z0-9_-]{1,}){0,}$","markdownDescription":"**Output Directory**\n\n\nThe **output** build path is the directory where transformed theme files will be written. This is typically called `dist` in most projects but Syncify defaults this to `theme`. The **output** directory will reflect the theme files synced with your store online."},"import":{"type":"string","default":"import","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[a-zA-Z0-9_-]{1,}){0,}$","markdownDescription":"**Import Directory**\n\nThe **import** build path is the directory where downloaded themes and files will be written. It is relative to your projects root directory and only used when running `import` (or download) mode."},"export":{"type":"string","default":"export","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[a-zA-Z0-9_-]{1,}){0,}$","markdownDescription":"**Export Directory**\n\nThe **export** directory is where packaged `.zip` themes will be written when running the `export` mode. Exported themes will prepended with the version number defined in this `package.json` file."},"paths":{"type":"object","additionalProperties":false,"markdownDescription":"**Paths**\n\nDefine the development theme structure of your project. You can create path maps to different locations within your project and Syncify will re-route them to the accepted theme structure imposed by Shopify. You cannot define reverse paths and globs must be relative to your root directory.\n\nAll paths must point to directories and files contained within the `input` directory defined. You can optionally omit the entry from paths as Syncify will normalize and prepend that to all values defined.","default":{"assets":"assets/**/*","config":"config/*.json","locales":"locales/*.json","layout":"layout/*.liquid","snippets":"snippets/**/*.liquid","schema":"schema/*.json","sections":"sections/**/*.liquid","templates":"templates/*","customers":"customers/*","metaobject":"metaobject/*","metafields":"metafields/**/*.json","pages":"pages/**/*","redirects":"redirects.yaml"},"properties":{"assets":{"markdownDescription":"Paths to files to be published to theme `assets` directory. Accepts a glob (anymatch) pattern","type":["string","array"],"oneOf":[{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"},{"type":"array","items":{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"}}],"default":"assets/**/*"},"config":{"type":["string","array"],"oneOf":[{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"},{"type":"array","items":{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"}}],"markdownDescription":"Paths to files to be published to the theme `config` directory. These are typically the `settings_schema.json` and `settings_data.json` files.","default":"config/*.json"},"locales":{"markdownDescription":"Paths to files to be published to theme `locales` directory. These are the translation files used by your store.","type":["string","array"],"oneOf":[{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"},{"type":"array","items":{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"}}],"default":"locales/*.json"},"layout":{"markdownDescription":"Paths to files to be published to the theme `layout` directory. These are Liquid template files.","type":["string","array"],"oneOf":[{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"},{"type":"array","items":{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"}}],"default":"layout/*.liquid"},"snippets":{"markdownDescription":"Paths to files to be published to the theme `snippets` directory. These are Liquid template files.","type":["string","array"],"oneOf":[{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"},{"type":"array","items":{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"}}],"default":"snippets/**/*.liquid"},"schema":{"markdownDescription":"Paths to `.json` shared section schema files. Syncify supports external section schemas that can be reused in section `{% schema %}` tags across your theme projects.","type":["string","array"],"oneOf":[{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"},{"type":"array","items":{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"}}],"default":"schema/*.json"},"sections":{"markdownDescription":"Paths to files to be published to the theme `sections` directory. These are either going to be `.liquid` or `.json` (section group) file types. You can provide sub-directory references here and Syncify will re-path values.\n\nSee the `views.sections` options to control how sections should be output.\"","type":["string","array"],"oneOf":[{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"},{"type":"array","items":{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"}}],"default":["sections/**/*.liquid","sections/**/*.json"]},"templates":{"markdownDescription":"Paths to files to be published to the theme `templates` directory.. These can be either JSON or Liquid template files.","type":["string","array"],"oneOf":[{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"},{"type":"array","items":{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"}}],"default":["templates/*.json","templates/*.liquid"]},"customers":{"markdownDescription":"Paths to files to be published to the theme `templates/customers` directory. These can be either JSON or Liquid template files.","type":["string","array"],"oneOf":[{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"},{"type":"array","items":{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"}}],"default":["templates/customers/*.json","templates/customers*.liquid"]},"metaobject":{"markdownDescription":"Paths to files to be published to theme `templates/metaobject` directory.","type":["string","array"],"oneOf":[{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"},{"type":"array","items":{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"}}],"default":"metaobject/**/*.json"},"metafields":{"markdownDescription":"The directory path to global shop metafields. Syncify provides a elegant approach to metafield synchronization using a `directory > file` based structure.","type":["string","array"],"oneOf":[{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"},{"type":"array","items":{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"}}],"default":"metafields/**/*.json"},"pages":{"markdownDescription":"The directory path to Markdown (`.md`) or HTML (`.html`) files. Shopify does not support Liquid code in Page body content. Syncify supports page body html content synchronization using frontmatter attribution.\n\n**Please note** Page html content cannot contain or reference Liquid objects and/or tags, Shopify will omit or escape them if they are found present. Syncify will validate the contents of your markdown pages are warn you when Liquid syntax is encountered.","type":["string","array"],"oneOf":[{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"},{"type":"array","items":{"type":"string","pattern":"^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"}}],"default":["pages/**/*.html","pages/**/*.md"]},"redirects":{"markdownDescription":"The directory path to redirect file, defaults to `redirects.yml`","type":"string","default":"redirects.yaml"}}},"spawn":{"type":"object","additionalProperties":false,"markdownDescription":"**Spawn**\n\nSpawned child processes to run in parallel with Syncify. Supply the CLI command of the process to execute in the relative running mode. You can leverage Syncify utilities and environment variables to conditionally execute different builds, eg: production or development.","properties":{"watch":{"type":"object","markdownDescription":"Supply the script commands you wish to spawn in watch mode. The `key` value will be used as the group reference in the CLI logs.","additionalProperties":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]}},"build":{"type":"object","markdownDescription":"Supply the script commands you wish to spawn in **build** mode. The `key` property value will be used as the group reference in the CLI logs.\n\n**Please Note** Build spawns will execute only once.","additionalProperties":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]}}}},"stores":{"oneOf":[{"type":"object","additionalProperties":{"type":"object","patternProperties":{"[a-z]+":{"type":"number"}}},"propertyNames":{"pattern":"[a-z0-9-]+|[a-z0-9-]+\\.myshopify\\.com"}},{"type":["object","array"],"oneOf":[{"type":"object","required":["domain","themes"],"additionalProperties":false,"properties":{"domain":{"markdownDescription":"Provide your Shopify domain. You do not need to include the `myshopify.com` portion of the domain, just the sub-domain name is fine.\n\n```jsonc\n{\n  \"domain\": \"my-store\" // equivalent to my-store.myshopify.com\n}\n````","type":"string","pattern":"^[a-zA-Z0-9_-]+$"},"themes":{"markdownDescription":"Provide an object `key` > `value` list of theme maps. The `key` properties represent a theme target name, the \"target\" name is an internal identifier you will use when executing operations on the CLI. The `value` is the theme `id` which you can obtain in your Shopify admin or alternatively via the CLI by running `syncify themes` command.\n\n**Example**\n\n```jsonc\n{\n  \"domain\": \"my-store\", // equivalent to my-store.myshopify.com\n  \"themes\": {\n    \"dev\": 12345678910, // example of a theme target\n  }\n}\n````","examples":[{"dev":12345678910}],"type":"object","propertyNames":{"pattern":"^[a-z0-9_$-]{1,15}$","markdownDescription":"The theme key properties are internal identifiers used as **target** references. The name **must** be written in lowercase format and cannot contain any whitespace characters. You will use the name you provide to perform operations via the CLI.\n\n**Example**\n\nBelow we have passed 3 theme targets, `dev`, `stage` and `live`. Each theme value points to a specific theme that exists in the Shopify store `cool-jeans.myshopify.com`.\n\n```jsonc\n{\n  \"domain\": \"cool-jeans\", // equivalent to cool-jeans.myshopify.com\n  \"themes\": {\n    \"dev\": 12345678910, // example of a theme target\n    \"stage\": 1239846789, // example of a theme target\n    \"live\": 1987654321, // example of a theme target\n  }\n}\n```\n\n**Usage**\n\nUsing the above example, if you wanted to start up **watch** mode and begin developing and syncing with the theme id provided to the `dev` value, we would run the following command:\n\n```bash\n$ syncify cool-jeans --theme dev --watch\n```\n\nWhat if you wanted to target not just the `dev` theme but also the `stage` theme in **watch** mode, then you can simply just pass the `stage` target name along side the `dev` argument, for example:\n\n```bash\n$ syncify cool-jeans --theme dev,stage --watch\n```\n\nLet's say you want perform full **build** and then an upload to the theme id using the `live` key, then you could simply pass:\n\n```bash\n$ syncify cool-jeans --theme live --build --upload\n```"}}}},{"type":"array","items":{"type":"object","required":["domain","themes"],"additionalProperties":false,"properties":{"domain":{"markdownDescription":"Provide your Shopify domain. You do not need to include the `myshopify.com` portion of the domain, just the sub-domain name is fine.\n\n```jsonc\n{\n  \"domain\": \"my-store\" // equivalent to my-store.myshopify.com\n}\n````","type":"string","pattern":"^[a-zA-Z0-9_-]+$"},"themes":{"markdownDescription":"Provide an object `key` > `value` list of theme maps. The `key` properties represent a theme target name, the \"target\" name is an internal identifier you will use when executing operations on the CLI. The `value` is the theme `id` which you can obtain in your Shopify admin or alternatively via the CLI by running `syncify themes` command.\n\n**Example**\n\n```jsonc\n{\n  \"domain\": \"my-store\", // equivalent to my-store.myshopify.com\n  \"themes\": {\n    \"dev\": 12345678910, // example of a theme target\n  }\n}\n````","examples":[{"dev":12345678910}],"type":"object","propertyNames":{"pattern":"^[a-z0-9_$-]{1,15}$","markdownDescription":"The theme key properties are internal identifiers used as **target** references. The name **must** be written in lowercase format and cannot contain any whitespace characters. You will use the name you provide to perform operations via the CLI.\n\n**Example**\n\nBelow we have passed 3 theme targets, `dev`, `stage` and `live`. Each theme value points to a specific theme that exists in the Shopify store `cool-jeans.myshopify.com`.\n\n```jsonc\n{\n  \"domain\": \"cool-jeans\", // equivalent to cool-jeans.myshopify.com\n  \"themes\": {\n    \"dev\": 12345678910, // example of a theme target\n    \"stage\": 1239846789, // example of a theme target\n    \"live\": 1987654321, // example of a theme target\n  }\n}\n```\n\n**Usage**\n\nUsing the above example, if you wanted to start up **watch** mode and begin developing and syncing with the theme id provided to the `dev` value, we would run the following command:\n\n```bash\n$ syncify cool-jeans --theme dev --watch\n```\n\nWhat if you wanted to target not just the `dev` theme but also the `stage` theme in **watch** mode, then you can simply just pass the `stage` target name along side the `dev` argument, for example:\n\n```bash\n$ syncify cool-jeans --theme dev,stage --watch\n```\n\nLet's say you want perform full **build** and then an upload to the theme id using the `live` key, then you could simply pass:\n\n```bash\n$ syncify cool-jeans --theme live --build --upload\n```"}}}}}]}]},"views":{"type":"object","additionalProperties":false,"markdownDescription":"**Views**\n\nTransform options for Liquid/HTML files. In Syncify, **views** are considered files which will render markup.","default":{"sections":{"prefixDir":false,"separator":"-","global":[]},"snippets":{"prefixDir":false,"separator":"-","global":[]},"pages":{"importLanguage":"markdown","suffixDir":false,"author":"","global":[]}},"properties":{"sections":{"type":"object","additionalProperties":false,"markdownDescription":"Section file handling (i.e: sub-directory grouping)","properties":{"prefixDir":{"type":"boolean","default":false,"markdownDescription":"Sections can be structured within sub-directories. If a section file is determined to be deeply nested in such a way then this option will enable parent directory name prefixing to be applied the filenames. Prefixing is helpful when you have a large number of sections and want to avoid name collisions. You can control what sub-directories should have pre-fixing applied using the `global[]` option or alternatively do not reference paths to sections which contain sub directories.\n\n**Example**\n\nIf this option is set to `true` and a section path is `source/sections/index/some-file.liquid` then the filename will be prefixed with `index` when it is being written to your defined **output** directory. When referencing it within themes you'd need to use `index_some-file.liquid`\n"},"separator":{"type":"string","default":"-","markdownDescription":"Define a separator character to be used when `prefixDir` is enabled.","oneOf":[{"markdownDescription":"dash","enum":["-"]},{"markdownDescription":"underscore","enum":["_"]},{"markdownDescription":"colon","enum":[":"]},{"markdownDescription":"at","enum":["@"]}]},"global":{"markdownDescription":"Global entries will skip prefixing when a sub-directory structure is detected.","type":"array","items":{"type":"string"}}}},"snippets":{"type":"object","additionalProperties":false,"markdownDescription":"Snippet file handling (i.e: sub-directory grouping)","properties":{"prefixDir":{"type":"boolean","default":false,"markdownDescription":"Snippets can be structured within sub-directories. If a snippet file is determined to be deeply nested in such a way then this option will enable parent directory name prefixing to be applied the filenames. Prefixing is helpful when you have a large number of snippets and want to avoid name collisions. You can control what sub-directories should have pre-fixing applied using the `global[]` option or alternatively do not reference paths to snippets which contain sub directories.\n\n**Example**\n\nIf this option is set to `true` and a snippet path is `source/snippets/index/some-file.liquid` then the filename will be prefixed with `index` when it is being written to your defined **output** directory. When referencing it within themes you'd need to use `index_some-file.liquid`\n"},"separator":{"type":"string","default":"-","markdownDescription":"Define a separator character to be used when `prefixDir` is enabled.","oneOf":[{"markdownDescription":"dot","enum":["."]},{"markdownDescription":"dash","enum":["-"]},{"markdownDescription":"underscore","enum":["_"]},{"markdownDescription":"colon","enum":[":"]},{"markdownDescription":"at","enum":["@"]}]},"global":{"markdownDescription":"Global entries will skip prefixing when a sub-directory structure is detected.","type":"array","items":{"type":"string"}}}},"pages":{"type":"object","additionalProperties":false,"markdownDescription":"Static page handling.","properties":{"language":{"type":"string","markdownDescription":"Whether the pulled page content should be written as HTML or have the HTML converted to Markdown.","oneOf":[{"enum":["html"]},{"enum":["markdown"]}]},"suffixDir":{"type":"boolean","markdownDescription":"Whether pages contained in sub-directories should use their directory name as the `template_suffix` when publishing to stores","default":false},"author":{"markdownDescription":"","type":"string","default":""},"global":{"markdownDescription":"If suffixDir is `true` you can provide a list of page sub-directories or relative files that should pass through without applying the directory name as a template_suffix on the page.\n\n**Cannot contain glob (`*`) stars**\n\n```js\n\n// ✓ This is correct\n{ \"global\": ['some-dir/filename.md' ] }\n\n// ✗ This is incorrect\n{ \"global\": ['some-dir/*.md' ] }\n\n```","type":"array","items":{"type":"string"}}}}}},"hot":{"markdownDescription":"**HOT Reloading**\n\nHOT reloading configuration and settings. This option accepts an `object` settings configuration or a boolean `false` value. When `false` HOT reloads will never be incurred, and the `false` value wil override `--hot` CLI flags. When left `undefined` the default HOT reloading configuration is used.","default":{"label":"visible","inject":true,"server":3000,"socket":8089,"method":"hot","strategy":"hydrate","scroll":"preserved","layouts":["theme.liquid"]},"oneOf":[{"type":"object","additionalProperties":false,"properties":{"label":{"type":"string","enum":["visible","hidden"],"markdownDescription":"Whether or not Syncify hot reloads UI labels should render."},"inject":{"type":"boolean","markdownDescription":"Whether or not Syncify should inject the required HOT snippet at runtime layout/s. When `false` you will need to manually place the `hot.js.liquid` snippet into your theme.\n\n**Please note** By default when running `--hot` Syncify will check your layout/s for the hot snippet and if it's not present then syncify will inject it and invoke an upload of the layouts."},"layouts":{"type":"array","items":{"type":"string"},"default":["theme.liquid"],"markdownDescription":"A string list of Liquid template layout names used in your theme which should have the hot snippet injected."},"server":{"type":"integer","default":3000,"markdownDescription":"The static server for assets - This will be written in the HOT snippet.\n\n**Example**\n\nWhen the server port is set to `3000` then assets will apply the following:\n\n```js\n'http://localhost:3000/some-asset.js'\n```"},"socket":{"type":"integer","default":8089,"markdownDescription":"Websocket port - This will be written in the HOT snippet\n\n**Example**\n\nWhen the server port is set to `8089` then the websocket will apply the following:\n\n```js\n'ws://localhost:8089/ws'\n```"},"method":{"type":"string","enum":["hot","refresh"],"default":"hot","markdownDescription":"Which live reload method should Syncify use?\n\n**hot**\n\nHot reloads assets and views with automatic refresh upon changes\n\n**refresh**\n\nInvokes a full page refresh after changes have been applied\n\n"},"strategy":{"type":"string","enum":["hydrate","replace"],"default":"hydrate","markdownDescription":"The HOT strategy to use. Syncify supports 2 different replacement strategies and you will need to choose which one to use depending on your project type.\n\n`hydrate`\n\nThe hydrate strategy will execute morph replacements. This is what Syncify will default to using, however, it is not always perfect and in cases where you leverage frameworks that use DOM Mutation observers, it is probably better to use `replace`.\n\n`replace`\n\nThe replace strategy will execute fragment swaps using `replaceWith` instead of morphs when executing HOT reloads. It works almost identically to `hydrate` but respects DOM mutations. If you are leveraging a framework like Stimulus or Alpine, then choose this strategy.\n\n"},"scroll":{"type":"string","enum":["preserved","top"],"default":"preserved","markdownDescription":"Scroll position between reloads"}}},{"type":"boolean","default":false}]},"log":{"type":"object","markdownDescription":"**Log**\n\nLogger configuration for CLI console. Controls the log level and approach to apply.","additionalProperties":false,"default":{"stats":true,"warnings":true,"silent":false,"clear":true},"properties":{"stats":{"type":"boolean","default":true,"markdownDescription":"Whether or not file stats should print\n\n> Helpful when building for production (`--prod`)\n\n"},"warnings":{"type":"boolean","default":true,"markdownDescription":"Whether or not file stats should print\n\n> Helpful when building for production (`--prod`)\n\n"},"silent":{"type":"boolean","default":false,"markdownDescription":"Suppress CLI logs\n"},"clear":{"type":"boolean","markdownDescription":"Whether or not to clear the screen between changes.","default":true}}},"style":{"type":"object","required":["input"],"additionalProperties":false,"properties":{"input":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}],"markdownDescription":"Style input source paths. Accepts `string` or `string[]` glob patterns. Resolution is relative to your defined `input` directory.\n\n\n"},"watch":{"type":"array","items":{"type":"string"},"default":[],"markdownDescription":"Glob stylesheet paths/files to watch. When changes are applied to matched files, then the defined `input` will be compiled.\n\n"},"rename":{"type":"string","markdownDescription":"Rename the stylesheet file/s. The same name as the source file will be used when undefined. Accepts namespaces, `[file]`, `[dir]`, and `[ext]`.\n\n\n"},"snippet":{"type":"boolean","default":false,"markdownDescription":"Optionally output the CSS as a snippet. This will transform the stylesheet inline, wrap output within `<style></style>` tags, and write it to `snippets`.\n\n\n"},"tailwind":{"type":"boolean","markdownDescription":"**NOT YET AVAILABLE**\n\n[TailwindCSS](https://tailwindcss.com/) Override\n\nTailwind transforms will use the `tailwind.config.js` configuration file in your project's root (or defined `config` path). If you have not provided a tailwind config file, then Syncify will use options defined via `processor.tailwind`. You can optionally override configuration on a per-transform basis, and any options defined here will be merged with those defined in your `tailwind.config.js` or `processor.tailwind`.\n"},"postcss":{"oneOf":[{"type":"boolean"}],"default":true,"markdownDescription":"[PostCSS](https://postcss.org/) Override\n\nCSS File transforms will use the options provided to `processor.postcss` but you can optionally override those defaults on a per-transform basis. Any configuration options defined here will be merged with the options defined in `processor.postcss`.\n\nYou can also skip pre-processing with postcss by passing a _boolean_ `false`, which will inform Syncify to not pass output to PostCSS. By default, Syncify will pass all compiled SASS and files with `.css` extensions to PostCSS.\n"},"sass":{"markdownDescription":"[SASS Dart](https://sass-lang.com/documentation/js-api/) Override\n\nSASS File transforms will use the options provided to `processor.sass` but you can optionally override those defaults on a per-transform basis. Any configuration options defined here will be merged with the options defined in `processor.sass`.\n\nYou can also skip SASS transforms by passing a _boolean_ `false`, which will inform Syncify to not pass output to SASS, which is the default if SASS is not installed.\n\nBy default, Syncify will forward all input files using `.scss` or `.sass` or extension to SASS Dart. If you have PostCSS installed then Syncify will automatically pass SASS files to PostCSS in the post-process.\n\n","oneOf":[{"type":"boolean","default":true},{"type":"object","properties":{"include":{"type":"array","default":[],"markdownDescription":"A list of paths to include, ie: node_modules.","items":{"type":"string"}},"style":{"type":"string","markdownDescription":"The style compiled CSS should be output.","default":"compressed","enum":["compressed","expanded"]},"warnings":{"type":"boolean","default":true,"markdownDescription":"Whether or not to print warnings to CLI - Warnings will require an stdin invocation to view in Syncify, which logs will instruct upon.. Setting this to `false` will hide warnings all together."},"sourcemaps":{"type":"boolean","markdownDescription":"Whether or not to generate sourcemaps. Syncify will write sourcemaps within `node_modules/.syncify` and handle processing for you. Setting this to `false` will effectively disable sourcemap generation, generally not preferred as Syncify is pre-configured to reason about with sourcemaps on your behalf.","default":true},"quietDeps":{"type":"boolean","default":false,"markdownDescription":"This option is passed to SASS Dart compile instance. If this option is set to `true`, Sass won’t print warnings that are caused by dependencies. A `dependency` is defined as any file that’s loaded through external sources."}}}]}}},"script":{"type":"object","required":["input"],"additionalProperties":false,"properties":{"input":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}],"markdownDescription":"JS/TS input source paths. Accepts `string` or `string[]` glob patterns. Resolution is relative to your defined `input` directory.\n\n"},"target":{"type":"array","items":{"type":"string","enum":["es3","es5","es6","es2015","es2016","es2017","es2018","es2019","es2020","es2021","es2022","esnext"]},"default":"es2016","markdownDescription":"This sets the target environment for the generated JavaScript. It tells esbuild to transform JavaScript syntax which is too new for these environments into older JavaScript syntax that works in this environment/s.\n"},"external":{"type":"array","items":{"type":"string"},"default":[],"markdownDescription":"Instructs ESBuild to treat these modules as external. The import/s will be preserved and evaluated at runtime instead.\n\nSee: [ESBuild External Modules](https://esbuild.github.io/api/#external)\n\n"},"rename":{"type":"string","markdownDescription":"Rename the JavaScript file/s. The same name as the source file will be used when undefined. Accepts namespaces, `[file]`, `[dir]`, and `[ext]`.\n\n"},"snippet":{"type":"boolean","default":false,"markdownDescription":"Optionally write the JavaScript file inline as a snippet. This will transform the JS, and contained code will be output within `<script></script>` tags as a `snippet.liquid` file.\n"},"format":{"type":"string","default":"esm","enum":["esm","iife"],"markdownDescription":"The format to be generated. Because we are targeting browser environments, Syncify does not allow for CJS (commonjs) bundles to be produced."},"sourcemap":{"type":"boolean","default":true,"markdownDescription":"Whether or not sourcemap's should be generated. Syncify will process sourcemap generation internally, so this option only accepts a boolean value.\n"},"watch":{"type":"array","items":{"type":"string"},"default":[],"markdownDescription":"Entry points (paths/files) to watch that will trigger rebuilds of the defined `input` file. By default, Syncify will watch all import entries imported by the `input`.\n\n"},"esbuild":{"type":"boolean","default":true,"markdownDescription":"[ESBuild Override](https://esbuild.github.io/)\n\nESBuild file transforms will use the options provided to `processor.esbuild`, but you can optionally override those defaults on a per-transform basis. Any configuration options defined here will be merged with the options defined in `processor.esbuild`.\n\nYou can also skip pre-processing with ESBuild by passing a _boolean_ `false`, which will inform Syncify to process scripts with ESBuild.\n\n\n"}}},"svg":{"type":"object","required":["input"],"properties":{"input":{"markdownDescription":"SVG input source paths. Accepts `string` or `string[]` glob patterns. Resolution is relative to your defined `input` directory.\n\n","oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"rename":{"type":"string","markdownDescription":"Rename the SVG file/s. The same name as the source file will be used when undefined. Accepts namespaces, `[file]`, `[dir]`, and `[ext]`.\n\n**Example**\n\n```js\n'source/svg/arrow.svg' > 'arrow.svg' // if snippet is false\n'source/svg/check.svg' > 'check.liquid' // if snippet is true\n```\n"},"snippet":{"type":"boolean","default":false,"markdownDescription":"Rename the SVG file/s. The same name as the source file will be used when undefined. Accepts namespaces, `[file]`, `[dir]`, and `[ext]`.\n\n**Example**\n\n```js\n'source/svg/arrow.svg' > 'arrow.svg' // if snippet is false\n'source/svg/check.svg' > 'check.liquid' // if snippet is true\n```\n"},"format":{"oneOf":[{"type":"string","enum":["file","sprite"]},{"type":"null"}],"markdownDescription":"The SVG export format. Syncify can produce 2 different SVG formats:\n\nYou can omit this option when you have only 1 pre-processor installed or if you are applying a per-transfrom configuration override as it will default to the format which the inferred pre-processor produces. If you are using both the supported processors ([SVGO](https://github.com/svg/svgo) & [SVG Sprite](https://github.com/svg-sprite)) then you will need to inform Syncify on which format it should produce.\n\n\n- When no SVG pre-processor is installed: undefined\n- When both SVGO and SVG Sprite are installed (required): null\n- When SVGO is the only processor installed: 'file'\n- When SVG Sprite is the only processor installed: 'sprite'\n\n**File Format**\n\nSVG transforms using a `file` format require SVGO to be installed. File formats will produce individual `.svg` files that can be output as an `asset` or inlined into a `snippet`.\n\n**Sprite Format**\n\nSVG transforms using a `sprite` format require SVG Sprite to be installed. Sprite formats will produce an SVG Sprite that can be output as an `asset` or inlined into a `snippet`.\n"}}},"json":{"type":"object","properties":{"indent":{"type":"number","default":2,"markdownDescription":"The indentation level.\n\nDefault: `2`"},"useTab":{"type":"boolean","default":false,"markdownDescription":"Whether to use `\t` indentation characters.\n\nDefault: `false`"},"crlf":{"type":"boolean","default":false,"markdownDescription":"If line termination should be Windows (CRLF) format. Unix (LF) format is the default.\n\nDefault: `false`"},"exclude":{"type":"array","items":{"type":"string"},"markdownDescription":"An optional string list of paths/filenames to exclude from processing, i.e., pass through.\n\nDefault: `false`"}},"additionalProperties":false},"transform":{"type":"object","markdownDescription":"**Transform**\n\nSyncify transforms are used for assets pipeline. It's here where yo can have Syncify process scripts (TypeScript/JavaScript), styles (SCSS/SASS), SVGs and more. Transform configuration will use processors.","additionalProperties":false,"properties":{"json":{"markdownDescription":"**JSON**\n\nThe `json` transform option controls how `.json` files should be processed. Templates, Config, Locales and Metafields paths typically where JSON files are used. Options defined here will be used when Syncify is processing these file types. In addition, Syncify will also apply handle any Assets that have `.json` (or `.schema` for shared schema) extension using these options.","$ref":"#/definitions/json"},"script":{"markdownDescription":"**Script**\n\nThe `script` transform option which supports TypeScript (`.ts` and `.tsx`) and/or JavaScript (`.js` and `.jsx`) bundling using [ESBuild](https://esbuild.github.io/). Script transforms use a pre-defined set of processing configurations and will produce lean JavaScript bundles designed to work seamlessly in development mode or when leveraging HOT reloads.\n\nSyncify will also apply refinements to distribution bundles focused on performance when generating production builds for your Shopify theme.","oneOf":[{"type":"object","propertyNames":{"pattern":"(assets|snippets)/[@a-z0-9_$.-[\\]]+","markdownDescription":"Script inputs can be defined a few different ways depending on your preference, using the rename pattern requires you to provide either `assets/` or `snippets/` as a starting entry point.\n\n\n**Rename with single input**\n\n```jsonc\n// OPTION 1 - Rename with single input\n{\n  \"script\": {\n   \"assets/filename.min.js\": \"path/to/source/file.ts\", // write to assets dir\n   \"snippets/js-file.liquid\": \"path/to/source/foo.ts\"  // write as snippet\n  }\n}\n```\n\n**Rename with multiple inputs**\n\n```jsonc\n// OPTION 2 - Rename with multiple inputs\n{\n  \"script\": {\n   \"assets/[file].min.[ext]\": [\n     \"path/to/source/file-1.ts\", // outputs assets/file-1.min.js\n     \"path/to/source/file-2.ts\", // outputs assets/file-2.min.js\n   ]\n  }\n}\n```\n\n**Rename with overrides**\n\n```jsonc\n// OPTION 3 - Rename with overrides\n{\n  \"script\": {\n   \"assets/filename.min.js\": {\n      \"input\": \"path/to/source/file.ts\",\n      \"splitting\": true,\n      \"treeShaking\": false\n    }\n  }\n}\n```\n\n"},"additionalProperties":{"oneOf":[{"type":"array","items":{"type":"string"}},{"type":"string"},{"$ref":"#/definitions/script"}]}},{"$ref":"#/definitions/script"},{"type":"array","items":{"$ref":"#/definitions/script"}}]},"style":{"markdownDescription":"**Style**\n\nThe `style` transform option can be used for CSS (`.css`) and SCSS/SASS (`.scss` or `.sass`) bundling. Style transform support is made possible by using compilers like [Dart SASS](https://sass-lang.com/), [PostCSS](https://postcss.org/) and/or [Tailwind](tailwindcss.com).\n\nThe `style` option provides developers with replicated configuration control but you may also prefer to use standard config files (e.g: `postcss.config.js`) which Syncify also supports.","oneOf":[{"type":"object","propertyNames":{"pattern":"(assets|snippets)/[@a-z0-9_$.-[\\]]+","markdownDescription":"Style inputs can be defined a few different ways depending on your preference, using the rename pattern requires you to provide either `assets/` or `snippets/` as a starting entry point.\n\n\n**Rename with single input**\n\n```jsonc\n// OPTION 1 - Rename with single input\n{\n  \"style\": {\n   \"assets/stylesheet.min.css\": \"path/to/source/file.css\", // write to assets dir\n   \"snippets/css-file.liquid\": \"path/to/source/foo.css\"    // write as snippet\n  }\n}\n```\n\n**Rename with multiple inputs**\n\n```jsonc\n// OPTION 2 - Rename with multiple inputs\n{\n  \"style\": {\n   \"assets/[file].min.[ext]\": [\n     \"path/to/source/file-1.css\", // outputs assets/file-1.min.css\n     \"path/to/source/file-2.css\", // outputs assets/file-2.min.css\n   ]\n  }\n}\n```\n\n**Rename with overrides**\n\n```jsonc\n// OPTION 3 - Rename with overrides\n{\n  \"style\": {\n   \"assets/filename.min.css\": {\n      \"input\": \"path/to/source/file.scss\",\n      \"sass\": true\n    }\n  }\n}\n```\n\n"},"additionalProperties":{"oneOf":[{"type":"array","items":{"type":"string"}},{"type":"string"},{"$ref":"#/definitions/style"}]}},{"$ref":"#/definitions/style"},{"type":"array","items":{"$ref":"#/definitions/style"}}]},"svg":{"markdownDescription":"**SVG**\n\nSyncify provides integrated support with SVGO for processing SVG file types.","oneOf":[{"type":"object","propertyNames":{"pattern":"(assets|snippets)/[@a-z0-9_$.-[\\]]+","markdownDescription":"svg inputs can be defined a few different ways depending on your preference, using the rename pattern requires you to provide either `assets/` or `snippets/` as a starting entry point.\n\n\n**Rename with single input**\n\n```jsonc\n// OPTION 1 - Rename with single input\n{\n  \"svg\": {\n   \"assets/foo-file.svg\": \"path/to/source/icons/file.svg\",  // write to assets dir\n   \"snippets/icon.[file]\": \"path/to/source/icons/*.svg\"    // write as snippet\n  }\n}\n```\n\n**Rename with multiple inputs**\n\n```jsonc\n// OPTION 2 - Rename with multiple inputs\n{\n  \"svg\": {\n   \"snippets/icon.[file]\": [\n     \"path/to/source/file-1.svg\", // outputs snippets/icon.file-1.liquid\n     \"path/to/source/file-2.svg\", // outputs snippets/icon.file-2.liquid\n   ]\n  }\n}\n```\n\n**Rename with overrides**\n\n```jsonc\n// OPTION 3 - Rename with overrides\n{\n  \"svg\": {\n   \"snippet/icons\": {\n      \"input\": \"path/to/source/icons/*.svg\",\n      \"format\": \"sprite\"\n    }\n  }\n}\n```\n\n"},"additionalProperties":{"oneOf":[{"type":"array","items":{"type":"string"}},{"type":"string"},{"$ref":"#/definitions/svg"}]}},{"$ref":"#/definitions/svg"},{"type":"array","items":{"$ref":"#/definitions/svg"}}]}}},"terser":{"type":["boolean","object"],"markdownDescription":"**Terser**\n\nTerser configuration for theme minification and obfuscation. Syncify supports low level minification of markup and liquid and also exposes processor/transform distribution control via this option.","properties":{"json":{"type":["boolean","object"],"default":true,"properties":{"assets":{"type":"boolean","default":true,"markdownDescription":"Minify `.json` files writing to `theme/assets`.\n\nDefault: true"},"config":{"type":"boolean","default":true,"markdownDescription":"Minify `settings_schema.json` and `settings_data.json` config files.\n\nDefault: true"},"locales":{"type":"boolean","default":true,"markdownDescription":"Minify `locale` and `.json` files.\n\nDefault: true"},"metafields":{"type":"boolean","default":true,"markdownDescription":"Minify `metafield` and `.json` files.\n\nDefault: true"},"metaobject":{"type":"boolean","default":true,"markdownDescription":"Minify `metaobject` and `.json` files.\n\nDefault: true"},"groups":{"type":"boolean","default":true,"markdownDescription":"Minify section group `.json` files.\n\nDefault: true"},"templates":{"type":"boolean","default":true,"markdownDescription":"Minify `template` and `.json` files.\n\nDefault: true"},"exclude":{"type":"array","items":{"type":"string"},"default":[],"markdownDescription":"An optional list of paths/files to exclude from minification.\n\nDefault: []"}}},"script":{"type":["boolean","object"],"default":true,"properties":{"keepNames":{"type":"boolean","default":false,"markdownDescription":"Whether to keep original variable and function names."},"legalComments":{"type":"string","enum":["external","none","inline","eof","linked"],"default":"inline","markdownDescription":"Control the preservation of comments in the minified code. Possible values: 'all', 'some', 'none', 'inline'."},"minifyIdentifiers":{"type":"boolean","default":true,"markdownDescription":"Whether to minify variable and function names."},"minifySyntax":{"type":"boolean","default":true,"markdownDescription":"Whether to minify JavaScript syntax."},"minifyWhitespace":{"type":"boolean","default":true,"markdownDescription":"Whether to minify whitespace."},"mangleQuoted":{"type":"boolean","default":true,"markdownDescription":"Whether to mangle properties in quoted object literals."},"exclude":{"type":"array","items":{"type":"string"},"default":[],"markdownDescription":"An optional list of paths/files to exclude from minification."}}},"liquid":{"type":["boolean","object"],"default":true,"properties":{"removeComments":{"type":"boolean","default":true,"markdownDescription":"Whether to remove comments from the content."},"collapseInner":{"type":"boolean","default":false,"markdownDescription":"Whether to collapse inner content (e.g: collapse whitespace and line breaks)."},"collapseWhitespace":{"type":"boolean","default":true,"markdownDescription":"Whether to collapse whitespace (e.g: remove extra spaces and line breaks)."},"minifyJavascript":{"type":"boolean","default":false,"markdownDescription":"Whether to minify JavaScript content."},"minifySchema":{"type":"boolean","default":false,"markdownDescription":"Whether to minify schema content."},"minifyStyle":{"type":"boolean","default":false,"markdownDescription":"Whether to minify style content."},"minifyStylesheet":{"type":"boolean","default":false,"markdownDescription":"Whether to minify stylesheet content."},"stripDashes":{"type":"boolean","default":true,"markdownDescription":"Whether to strip dashes (e.g., remove hyphens)."},"exclude":{"type":"array","items":{"type":"string"},"default":[],"markdownDescription":"An optional list of paths/files to exclude from minification."}}},"markup":{"type":["boolean","object"],"default":true,"properties":{"collapseWhitespace":{"type":"boolean","default":true,"markdownDescription":"Whether to collapse whitespace (e.g: remove extra spaces and line breaks)."},"minifyJS":{"type":"boolean","default":true,"markdownDescription":"Whether to minify JavaScript content."},"minifyCSS":{"type":"boolean","default":true,"markdownDescription":"Whether to minify CSS content."},"removeComments":{"type":"boolean","default":true,"markdownDescription":"Whether to remove comments from the content."},"exclude":{"type":"array","items":{"type":"string"},"default":[],"markdownDescription":"An optional list of paths/files to exclude from minification."}}}},"additionalProperties":false},"processors":{"type":"object","properties":{"esbuild":{"type":"object"},"sass":{"type":"object"},"svgo":{"type":"object"},"sprite":{"type":"object"},"postcss":{"type":"array"}}},"publish":{"type":"object","markdownDescription":"**Publishing**\n\nPublish and release configuration. The settings defined here will be used for version control and theme publishing using Syncify.\n","default":{"tunnelPort":80,"publishRole":"unpublished","bindVersion":true,"themeLimit":3},"properties":{"tunnelPort":{"type":"number","default":80,"markdownDescription":"The port address to publish on. In most cases, you can leave this to the default, unless port 80 is occupied. Use a different port in such a situation.\n\nDefault: 80"},"publishRole":{"type":"string","enum":["main","unpublished","development"],"default":"unpublished","markdownDescription":"Set the publishment role to use. Defaults to 'unpublished', which means theme publishes will not be made pushed live.\n\n'main': The theme is published. Customers see it when they visit the online store.\n'unpublished': The theme is unpublished. Customers can't see it.\n'development': The theme is used for development. The theme can't be published and is temporary.\n\nDefault: 'unpublished'"},"bindVersion":{"type":"boolean","default":false,"markdownDescription":"Bind theme version with the `settings_schema.json` version.\n\nDefault: false"},"themeLimit":{"type":"number","default":3,"markdownDescription":"Limit the amount of new theme publishments.\n\nDefault: 3"}}}},"markdownDescription":"You can provide Syncify configuration here as an alternative to using an external `syncify.config` file. When Syncify detects the existence of a `syncify.config` file then configuration here will be ignored.\n\n**Example**\n\n```json\n{\n  \"syncify\": {\n    \"stores\": {},\n    \"config\": {}\n  }\n}\n```","properties":{"input":{"$ref":"#/definitions/input"},"output":{"$ref":"#/definitions/output"},"import":{"$ref":"#/definitions/import"},"export":{"$ref":"#/definitions/export"},"publish":{"$ref":"#/definitions/publish"},"paths":{"$ref":"#/definitions/paths"},"spawn":{"$ref":"#/definitions/spawn"},"log":{"$ref":"#/definitions/log"},"hot":{"$ref":"#/definitions/hot"},"views":{"$ref":"#/definitions/views"},"terser":{"$ref":"#/definitions/terser"},"transform":{"$ref":"#/definitions/transform"},"processors":{"$ref":"#/definitions/processors"}}}